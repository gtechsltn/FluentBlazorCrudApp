@page "/login"
@using FluentBlazorApp.Application.Interfaces
@using FluentBlazorApp.Application.Services
@using FluentBlazorApp.Domain
@using FluentBlazorApp.Infrastructure.Security

@inject IUserService UserService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h1>Login</h1>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="loginModel.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Login</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        loginModel.Username = "Admin";
        loginModel.Password = "Abc@123$";

        var user = await UserService.LoginAsync(loginModel.Username, loginModel.Password);

        if (user != null)
        {
            if (user.Username == "Admin")
            {
                await AuthenticationStateProvider.MarkUserAsAuthenticated(user.Username, "Admin");
                NavigationManager.NavigateTo("/", true);
            }
        }
        else
        {
            errorMessage = "Invalid username or password.";
        }
    }

    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}